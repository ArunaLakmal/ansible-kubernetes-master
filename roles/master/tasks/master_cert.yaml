- name: download ca
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/ca.pem
    dest: "/var/lib/kubernetes/ca.pem"
    mode: get

- name: download ca-key.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/ca-key.pem
    dest: "/var/lib/kubernetes/ca-key.pem"
    mode: get

- name: download kubernetes-key.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/kubernetes-key.pem
    dest: "/var/lib/kubernetes/kubernetes-key.pem"
    mode: get

- name: download kubernetes.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/kubernetes.pem
    dest: "/var/lib/kubernetes/kubernetes.pem"
    mode: get

- name: download service-account-key.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/service-account-key.pem
    dest: "/var/lib/kubernetes/service-account-key.pem"
    mode: get

- name: download service-account.pem
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/service-account.pem
    dest: "/var/lib/kubernetes/service-account.pem"
    mode: get

- name: download encryption-config.yaml
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/encryption-config.yaml
    dest: "/var/lib/kubernetes/encryption-config.yaml"
    mode: get

- name: download kube-controller-manager.kubeconfig
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/kube-controller-manager.kubeconfig
    dest: "/var/lib/kubernetes/kube-controller-manager.kubeconfig"
    mode: get

- name: download kube-scheduler.kubeconfig
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/kube-scheduler.kubeconfig
    dest: "/var/lib/kubernetes/kube-scheduler.kubeconfig"
    mode: get

- name: download admin.kubeconfig
  amazon.aws.aws_s3:
    bucket: "{{ bucket }}"
    object: /ca/admin.kubeconfig
    dest: "{{ admin_kubeconfig_path }}"
    mode: get

- name: kube master ip address
  shell: curl http://169.254.169.254/latest/meta-data/local-ipv4
  register: internal_ip

- set_fact: 
    INTERNAL_IP: "{{ internal_ip.stdout }}"

- name: setting up kube api service
  template:
    src: "{{ role_path }}/templates/kube-apiserver.service.j2"
    dest: /etc/systemd/system/kube-apiserver.service
    owner: root
    group: root
    mode: '0755'

- name: setting up kube controller manager service
  template:
    src: "{{ role_path }}/templates/kube-controller-manager.service.j2"
    dest: /etc/systemd/system/kube-controller-manager.service
    owner: root
    group: root
    mode: '0755'

- name: setting up kube scheduler
  template:
    src: "{{ role_path }}/templates/kube-scheduler.yaml.j2"
    dest: /etc/kubernetes/config/kube-scheduler.yaml
    owner: root
    group: root
    mode: '0755'

- name: setting up kube scheduler service
  template:
    src: "{{ role_path }}/templates/kube-scheduler.service.j2"
    dest: /etc/systemd/system/kube-scheduler.service
    owner: root
    group: root
    mode: '0755'

- name: systemd reload
  systemd:
    daemon_reload: yes

- name: enable kube-apiserver service and ensure it is not masked
  systemd:
    name: kube-apiserver
    enabled: yes
    masked: no

- name: make sure kube-apiserver service is running
  systemd:
    state: started
    name: kube-apiserver

- name: enable kube-controller-manager service and ensure it is not masked
  systemd:
    name: kube-controller-manager
    enabled: yes
    masked: no

- name: make sure kube-controller-manager service is running
  systemd:
    state: started
    name: kube-controller-manager

- name: enable kube-scheduler service and ensure it is not masked
  systemd:
    name: kube-scheduler
    enabled: yes
    masked: no

- name: make sure kube-scheduler service is running
  systemd:
    state: started
    name: kube-scheduler
    
- name: RBAC for kubelet authorization
  shell: |
    kubectl apply -f "{{ kubeadmin_role_manifest }}" --kubeconfig "{{ admin_kubeconfig_path }}"
    kubectl apply -f "{{ kubeadmin_role_binding_manifest }}" --kubeconfig "{{ admin_kubeconfig_path }}"
